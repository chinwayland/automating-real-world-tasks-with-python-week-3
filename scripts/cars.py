#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os
import collections
import operator




car_sales_json_location = "/Users/waylandchin/source/week3/automating-real-world-tasks-with-python-week-3/car_sales.json"

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}


  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item['total_sales'] > max_sales['total_sales']:
      max_sales = item
    # TODO: also handle most popular car_year
    cars_sold_per_year = {}
    for item in data:
      key = item['car']['car_year']
      value = item['total_sales']
      if key not in cars_sold_per_year:
        cars_sold_per_year[key] = value
      else:
        cars_sold_per_year[key] += value

  all_values = cars_sold_per_year.values()
  max_value = max(all_values)

  key_list = list(cars_sold_per_year.keys())
  val_list = list(cars_sold_per_year.values())

  position = val_list.index(max_value)
  top_year = key_list[position]

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(
      top_year, max_value)
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data(car_sales_json_location)
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  filename = '/tmp/cars.pdf' 
  title = "Sales summary for last month"
  additional_info = "<br/>".join(summary)
  table_data = cars_dict_to_table(data)
  reports.generate(filename, title, additional_info, table_data)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  recipient = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body =  "\n".join(summary)
  attachment_path =  "/tmp/cars.pdf"
  message = emails.generate(sender, recipient, subject, body, attachment_path)
  emails.send(message)



if __name__ == "__main__":
  main(sys.argv)
